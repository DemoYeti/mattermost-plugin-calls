// Code generated by MockGen. DO NOT EDIT.
// Source: server/utils.go
//
// Generated by this command:
//
//	mockgen -destination=server/mocks/mock_simpleclient.go -source=server/utils.go SimpleClient
//
// Package mock_main is a generated GoMock package.
package mock_main

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSimpleClient is a mock of SimpleClient interface.
type MockSimpleClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleClientMockRecorder
}

// MockSimpleClientMockRecorder is the mock recorder for MockSimpleClient.
type MockSimpleClientMockRecorder struct {
	mock *MockSimpleClient
}

// NewMockSimpleClient creates a new mock instance.
func NewMockSimpleClient(ctrl *gomock.Controller) *MockSimpleClient {
	mock := &MockSimpleClient{ctrl: ctrl}
	mock.recorder = &MockSimpleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleClient) EXPECT() *MockSimpleClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockSimpleClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockSimpleClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSimpleClient)(nil).Do), req)
}
